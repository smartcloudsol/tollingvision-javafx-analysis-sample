# TollingVision Application Messages

# Application
app.title=TollingVision
app.subtitle=Batch Vehicle Analysis Client

# Configuration Section
config.input.title=Input Configuration
config.input.folder=Input Folder (Required):
config.input.folder.tooltip=Select directory containing vehicle images (required to start processing)
config.input.group.pattern=Group Pattern:
config.input.group.pattern.tooltip=Regex pattern with 'id' capture group for grouping images
config.input.front.pattern=Front Pattern:
config.input.front.pattern.tooltip=Pattern to identify front view images
config.input.rear.pattern=Rear Pattern:
config.input.rear.pattern.tooltip=Pattern to identify rear view images
config.input.overview.pattern=Overview Pattern:
config.input.overview.pattern.tooltip=Pattern to identify overview/scene images

# Connection Section
config.connection.title=Connection & Runtime
config.connection.url=Service URL:
config.connection.url.tooltip=TollingVision service endpoint (host:port)
config.connection.secured=Secured (TLS)
config.connection.secured.tooltip=Use TLS encryption for connection
config.connection.insecure=Allow Insecure SSL
config.connection.insecure.tooltip=Accept invalid SSL certificates (development only)
config.connection.threads=Parallel Threads:
config.connection.threads.tooltip=Number of concurrent processing threads (1-64)
config.connection.export=CSV Directory (Optional):
config.connection.export.tooltip=Directory where CSV results will be saved (optional, defaults to current directory)

# Pattern Builder Dialog
pattern.builder.title=Filename Pattern Builder
pattern.builder.subtitle=Create patterns to group vehicle images by filename structure

# Mode Selection
pattern.builder.mode.simple=Simple
pattern.builder.mode.advanced=Advanced
pattern.builder.mode.simple.description=Visual pattern builder for non-regex users
pattern.builder.mode.advanced.description=Direct regex input for power users

# Simple Mode
pattern.builder.simple.step.indicator=Step %d of %d
pattern.builder.simple.step.file.analysis=Select a folder to begin configuration
pattern.builder.simple.step.token.selection=Review the detected filename tokens
pattern.builder.simple.step.group.id=Select the token that uniquely identifies each vehicle
pattern.builder.simple.step.role.rules=Define rules to categorize images by role

# Advanced Mode
pattern.builder.advanced.title=Advanced Pattern Builder
pattern.builder.advanced.description=Enter regex patterns directly. Group Pattern must contain exactly one capturing group for vehicle grouping.
pattern.builder.advanced.group.pattern=Group Pattern:
pattern.builder.advanced.front.pattern=Front Pattern:
pattern.builder.advanced.rear.pattern=Rear Pattern:
pattern.builder.advanced.overview.pattern=Overview Pattern:

# Buttons
button.ok=OK
button.cancel=Cancel
button.next=Next
button.previous=Previous
button.generate.pattern=Generate Pattern
button.fix.errors=Fix Errors to Generate
button.analyze.files=Analyze Files
button.browse=Browse...
button.choose=Choose
button.explain=Explain
button.copy=Copy
button.pattern.builder=Pattern Builder
button.choose=Choose...
button.save.as=Save as...
button.start=Start Processing
button.stop=Stop
button.start.tooltip=Begin batch processing of images (requires input folder to be selected)
button.stop.tooltip=Cancel current processing operation
button.reanalyze=Reanalyze

# Labels
label.visual.builder=Visual Builder:
label.status=Status:
label.mode=Mode:
label.input.folder=Input Folder:

# Placeholders
placeholder.input.folder=Input folder from main screen
pattern.builder.advanced.group.pattern.placeholder=Group Pattern (must contain exactly one capturing group)
pattern.builder.advanced.front.pattern.placeholder=Front Pattern
pattern.builder.advanced.rear.pattern.placeholder=Rear Pattern
pattern.builder.advanced.overview.pattern.placeholder=Overview Pattern

# Error Dialog
error.title=Error

# Status Messages
status.ready=Ready
status.configuration.valid=Configuration is valid
status.configuration.valid.warnings=Valid with %d warning(s)
status.validation.errors=%d error(s) must be fixed before proceeding
status.select.folder=Select a folder to begin configuration
status.analysis.completed=Analysis completed successfully
status.pattern.generated=Pattern configuration completed successfully
status.groups.discovered=Groups Discovered
status.requests.sent=Requests Sent
status.responses.ok=Responses OK
status.responses.error=Responses Error
status.event.log=Event Log (double-click to view details)
status.configuration.valid=Configuration is valid
status.configuration.valid.warnings=Valid with %d warning(s)

# Validation Messages
validation.error.no.group.id=Please select a token to use as Group ID
validation.error.invalid.group.pattern=Group pattern must contain exactly one capturing group
validation.error.no.role.rules=Please define rules for identifying image roles
validation.error.no.files.matched=No files match the current pattern - try adjusting Group ID
validation.error.incomplete.groups=Some groups are missing required image types
validation.error.regex.syntax=Invalid regular expression syntax
validation.error.empty.group.pattern=Group pattern cannot be empty
validation.error.no.role.patterns=At least one role pattern must be defined
validation.error.invalid.rule.value=Rule value cannot be empty
validation.error.multiple.capturing.groups=Group pattern contains multiple capturing groups - only one is allowed
validation.error.no.capturing.groups=Group pattern must contain exactly one capturing group

# Tooltips
tooltip.group.id.required=Group ID selection is required to generate patterns
tooltip.role.rules.optional=Define at least one role rule to categorize images
tooltip.preview.auto.update=Preview updates automatically when configuration changes
tooltip.validation.blocking=Fix all validation errors before proceeding
tooltip.extension.flexible=Match any image extension: .jpg, .jpeg, .png, .tiff, .bmp, .gif, .webp
tooltip.case.insensitive=Match text regardless of uppercase/lowercase
tooltip.regex.syntax=Use standard regex syntax with proper escaping for special characters
tooltip.capturing.group.required=Group pattern must contain exactly one capturing group ()
tooltip.sample.files=Sample files from the input folder will be used for preview
tooltip.pattern.builder.disabled=Set a valid input folder on the main screen to enable the Pattern Builder
tooltip.pattern.builder.enabled=Open visual pattern builder for easy configuration

# Extension Matching
extension.matching.label=Match any image extension
extension.matching.description.any=Matching any image extension (.jpg, .png, .tiff, etc.)
extension.matching.description.specific=Matching extensions: %s
extension.matching.description.single=Matching .%s files only
extension.matching.description.none=No extension matching configured

# Preview
preview.title=Live Preview
preview.summary.files=Processed= %d files: %d matched (%.1f%%), %d unmatched
preview.role.distribution=Role distribution
preview.role.missing=%d groups missing required roles
preview.role.errors=%d errors encountered
preview.column.filename=Filename
preview.column.group.id=Group ID
preview.column.role=Role
preview.column.status=Status
preview.label.unmatched=Unmatched Files:
preview.button.refresh=Refresh Preview
preview.button.cancel=Cancel
preview.status.empty=No files to preview
preview.status.showing.first=Showing first %d of %d files
preview.status.updated=Preview updated
preview.status.updated.grouping=Preview updated with grouping results
preview.status.failed=Preview update failed: %s
preview.status.cancelled=Preview update cancelled
preview.status.error=Error: %s
preview.status.matched=Matched
preview.status.unmatched=Unmatched
preview.task.processing=Processing preview...
preview.task.processed.count=Processed %d of %d files
preview.task.completed=Preview processing complete
preview.error.no.group.id=Could not extract group ID
preview.error.processing=Processing error: %s
preview.error.no.match=No match
common.none=(none)
file.filter.json=JSON Files
token.preview.show.first=Show first
token.preview.files.suffix=files

# Preset Selector
preset.selector.prompt=Select a preset...
preset.label=Preset:
button.save=Save
button.delete=Delete
button.manage=Manage...
button.import=Import
button.export=Export
preset.tooltip.save=Save current configuration as a preset
preset.tooltip.delete=Delete the selected preset
preset.tooltip.manage=Open preset management dialog
preset.tooltip.import=Import preset from JSON file
preset.tooltip.export=Export selected preset to JSON file
preset.alert.saved.title=Preset Saved
preset.alert.saved.message=Preset '%s' has been saved successfully.
preset.alert.save.failed.title=Save Failed
preset.alert.save.failed.message=Failed to save preset: %s
preset.delete.title=Delete Preset
preset.delete.header=Delete preset '%s'?
preset.delete.content=This action cannot be undone.
preset.alert.deleted.title=Preset Deleted
preset.alert.deleted.message=Preset '%s' has been deleted.
preset.alert.delete.failed.title=Delete Failed
preset.alert.delete.failed.message=Failed to delete preset '%s'.
preset.import.title=Import Preset
preset.exists.title=Preset Exists
preset.exists.header=Preset '%s' already exists
preset.exists.content=Do you want to overwrite the existing preset?
preset.import.success.title=Import Successful
preset.import.success.message=Preset '%s' has been imported successfully.
preset.import.failed.title=Import Failed
preset.import.failed.message=Failed to import preset: %s
preset.export.title=Export Preset
preset.export.success.title=Export Successful
preset.export.success.message=Preset '%s' has been exported to %s
preset.export.failed.title=Export Failed
preset.export.failed.message=Failed to export preset: %s

# Error Messages
error.input.folder.required=Input folder must be set on the main screen
error.input.folder.invalid=Input folder does not exist or is not accessible
error.pattern.builder.disabled=Pattern Builder is disabled. Please set a valid input folder on the main screen.
error.failed.to.load.files=Failed to load sample files: %d
error.failed.to.analyze=Failed to analyze files: %d
error.failed.to.validate=Failed to validate configuration: %d

# Help Text
help.group.id.selection=The Group ID identifies each unique vehicle in your image set. Select the part of the filename that is unique for each vehicle, such as a license plate number, vehicle ID, or timestamp.
help.token.types=Tokens are the parts of your filename separated by delimiters like underscores, hyphens, or dots.
help.role.rules=Role rules determine how to categorize images as front, rear, or overview. Define rules based on keywords or patterns in your filenames.
help.pattern.preview=The preview shows how your configuration will categorize actual filenames. Green rows indicate successful matches, red rows show issues that need attention.
help.regex.patterns=Regular expressions (regex) are patterns that match text. The pattern builder automatically generates regex from your visual configuration.

# Workflow Guidance
workflow.file.analysis=Step 0: Sample files from your input folder will be analyzed to detect naming patterns.
workflow.token.selection=Step 1: Review the detected filename tokens. These are the parts of your filenames separated by common delimiters.
workflow.group.id.selection=Step 2: Select the token that uniquely identifies each vehicle. This is typically a license plate, vehicle ID, or unique identifier.
workflow.role.rules=Step 3: Define rules to categorize images by role. Specify how to identify front, rear, and overview images.
workflow.preview.validation=Step 4: Review the preview to ensure your rules work correctly. Fix any validation errors before proceeding.
workflow.pattern.generation=Step 5: Generate the final patterns and apply to your configuration. The patterns will be used for actual image processing.

# Group ID Selector
group.id.title=Step 2: Group ID Selection
group.id.description=Select the token that uniquely identifies each vehicle group. This token will be used to group images of the same vehicle together. Choose a token that has different values for different vehicles but the same value for all images of the same vehicle.
group.id.requirements.title=Requirements:
group.id.requirement.1=• Must select exactly one token as Group ID
group.id.requirement.2=• Token should have unique values for different vehicles
group.id.requirement.3=• Token should be consistent across all images of the same vehicle
group.id.tokens.label=Available Tokens:
group.id.preview.label=Group Pattern Preview:
group.id.preview.prompt=Select a token to see the generated group pattern preview...
group.id.validation.good=✓ Good choice! This token appears to be a unique identifier
group.id.validation.maybe=⚠ This token might work, but verify it uniquely identifies vehicles
group.id.validation.bad=⚠ This token type is not typically used for grouping. Consider selecting a GROUP_ID, INDEX, or DATE token instead
group.id.preview.selected.title=SELECTED GROUP ID TOKEN
group.id.preview.token=Token: %s
group.id.preview.type=Type: %s
group.id.preview.position=Position: %d
group.id.preview.confidence=Confidence: %.1f
group.id.preview.generated.title=GENERATED GROUP PATTERN
group.id.preview.regex=Regex Pattern: %s
group.id.preview.explanation.title=PATTERN EXPLANATION
group.id.preview.explanation.intro=This pattern will:
group.id.preview.explanation.bullet.structure=• Match filenames with the same structure
group.id.preview.explanation.bullet.extract=• Extract the value at position %d as the group ID
group.id.preview.explanation.bullet.capture=• Use capturing group (parentheses) to identify the group ID value
group.id.preview.explanation.bullet.grouping=• Group all images with the same group ID value together
group.id.preview.examples.title=EXAMPLE MATCHES
group.id.preview.examples.intro=If your filenames look like:
group.id.preview.examples.line1=• vehicle_001_front.jpg → Group ID: 001
group.id.preview.examples.line2=• vehicle_001_rear.jpg → Group ID: 001
group.id.preview.examples.line3=• vehicle_002_front.jpg → Group ID: 002
group.id.preview.examples.summary.line1=Then images with Group ID '001' will be processed together,
group.id.preview.examples.summary.line2=and images with Group ID '002' will be processed together.
button.clear.selection=Clear Selection

# Token type display names
token.type.prefix=Prefix
token.type.suffix=Suffix
token.type.group.id=Group ID
token.type.camera.side=Camera/Side
token.type.date=Date
token.type.index=Index
token.type.extension=Extension
token.type.unknown=Unknown

# Progress Indicator Pane
progress.completed=Completed
progress.failed=Failed: %s
progress.cancelled=Cancelled

# Unknown Segments Dialog
unknown.segments.dialog.title=Handle Unknown Segments
unknown.segments.dialog.header=Unknown Segments Found
unknown.segments.dialog.description=Some filename segments could not be automatically classified. Please specify how to handle each unknown segment to prevent files from being excluded from matching.
unknown.segments.column.segment=Segment
unknown.segments.column.action=Action
unknown.segments.column.label=Custom Label
unknown.segments.custom.label.placeholder=Enter custom label...
unknown.segments.notification.title=Unknown Segments Detected
unknown.segments.notification.header=Filename segments need classification
unknown.segments.notification.message=%d unknown segments were found that could not be automatically classified. Would you like to handle them now?
unknown.segments.handle.now=Handle Now
unknown.segments.handle.later=Handle Later

# Gallery
gallery.title=Analysis Results
gallery.summary.title=Event Summary
gallery.images.title=Images
gallery.plates.title=Plate Recognition
gallery.json.title=Analysis Data
gallery.navigation.previous=◀ Previous
gallery.navigation.next=Next ▶
gallery.plate.front=Front Plate: %s
gallery.plate.rear=Rear Plate: %s
gallery.mmr.title=Make & Model Recognition
gallery.current.image=Current Image Data
gallery.anpr.results=ANPR Results
gallery.mmr.results=MMR Results
gallery.analysis.data=Analysis Data
gallery.current.header=Current Image
gallery.zoom.label=Zoom:
gallery.zoom.reset=Reset Zoom & Pan
gallery.image.name=Image: %s
gallery.no.analysis.event=No analysis data available for this event.
gallery.error.json.generate=Error generating JSON: %s
gallery.no.analysis.image=No analysis data available for this image.
gallery.error.analysis.display=Error displaying analysis data: %s
gallery.zoom.percent=%d%%

# Messages
message.no.buckets=No image groups found matching the specified patterns
message.processing.start=Processing %d groups with %d threads
message.csv.saved=Results saved to: %s
message.error.folder.invalid=Selected folder is not valid
message.error.csv.directory=CSV output directory does not exist
message.error.regex.empty=Pattern %s cannot be empty
message.error.connection=Connection error: %s

# CSV Dialogs
dialog.csv.select.title=Select CSV Output Directory
dialog.csv.saveas.title=Save CSV Results As

# Tooltips (additional)
tooltip.processing.running=Processing is currently running
tooltip.input.folder.required=Please select an input folder containing vehicle images

# Custom Tokens Dialog
custom.tokens.title=Custom Token Configuration
custom.tokens.description=Custom tokens help identify specific patterns in your filenames that don't fit standard categories. These tokens will be available for selection in the Token Selection screen.
custom.tokens.configured.title=Configured Custom Tokens:
custom.tokens.examples.label=Examples: %s
custom.tokens.add=Add Custom Token
custom.tokens.remove=Remove Selected
custom.tokens.load.defaults=Load Defaults
custom.tokens.add.dialog.title=Add Custom Token
custom.tokens.add.dialog.header=Define a new custom token
custom.tokens.prompt.name=Token name
custom.tokens.prompt.description=Description
custom.tokens.prompt.examples=Examples (comma-separated)
custom.tokens.field.name=Name:
custom.tokens.field.description=Description:
custom.tokens.field.examples=Examples:
custom.tokens.field.type=Type:
button.add=Add
button.close=Close

# Validation
validation.title.errors=Validation Errors
validation.title.warnings=Validation Warnings
validation.status.configuration.incomplete=Configuration incomplete
validation.status.no.errors.warnings=No validation issues
validation.status.processing=Validating configuration...

# Save Preset Dialog
save.preset.title=Save Preset
save.preset.header=Enter a name and description for this preset
save.preset.label.name=Name:
save.preset.label.description=Description:
save.preset.name.placeholder=Preset name
save.preset.description.placeholder=Describe this preset (optional)
save.preset.validation.name.required=Name is required

# Preset Management Dialog
preset.manage.title=Preset Management
preset.manage.header=Manage your presets
preset.manage.subheader=Rename, duplicate, delete, import, and export presets
preset.manage.column.name=Name
preset.manage.column.description=Description
preset.manage.column.created=Created
preset.manage.column.last.used=Last Used
preset.manage.actions=Preset Actions
preset.manage.file.ops=File Operations
preset.manage.rename=Rename
preset.manage.rename.tooltip=Rename the selected preset
preset.manage.rename.title=Rename Preset
preset.manage.rename.header=Rename preset '%s'
preset.manage.rename.content=Enter a new name:
preset.manage.rename.success.title=Preset Renamed
preset.manage.rename.success.message=Preset has been renamed to '%s'
preset.manage.rename.failed.title=Rename Failed
preset.manage.rename.failed.message=Could not rename preset.
preset.manage.duplicate=Duplicate
preset.manage.duplicate.tooltip=Create a copy of the selected preset
preset.manage.duplicate.title=Duplicate Preset
preset.manage.duplicate.header=Duplicate preset '%s'
preset.manage.duplicate.content=Enter a name for the copy:
preset.manage.duplicate.success.title=Preset Duplicated
preset.manage.duplicate.success.message=Preset has been duplicated as '%s'
preset.manage.duplicate.failed.title=Duplicate Failed
preset.manage.duplicate.failed.message=Could not duplicate preset.
preset.manage.import=Import...
preset.manage.import.tooltip=Import a preset from a JSON file
preset.manage.import.title=Import Preset
preset.manage.import.success.title=Import Successful
preset.manage.import.success.message=Imported preset from %s
preset.manage.export=Export...
preset.manage.export.tooltip=Export the selected preset to a JSON file
preset.manage.delete.failed.message=Failed to delete preset.

# Advanced Pattern Builder - Alerts and Labels
pattern.name.group=Group Pattern
pattern.name.front=Front Pattern
pattern.name.rear=Rear Pattern
pattern.name.overview=Overview Pattern
alert.pattern.explanation.title=Pattern Explanation
alert.pattern.explanation.header=%s Explanation
alert.pattern.explanation.empty=Enter a regex pattern to see its explanation.
alert.copy.pattern.title=Copy Pattern
alert.copy.pattern.empty.header=%s is empty
alert.copy.pattern.empty.content=Enter a pattern to copy it to the clipboard.
message.copy.pattern.success=%s copied to clipboard
error.validation.failed=Validation failed: %s
error.loading.files=Error loading files: %s
pattern.syntax.error=%s syntax error: %s
pattern.explanation.pattern.label=Pattern:
pattern.explanation.startsWith=• Starts with '^' - matches beginning of string
pattern.explanation.endsWith=• Ends with '$' - matches end of string
pattern.explanation.capturing.count=• Contains %d capturing group%s - extracts matched text
pattern.explanation.contains.digits=• '\\d+' - matches one or more digits
pattern.explanation.contains.word=• '\\w+' - matches one or more word characters (letters, digits, underscore)
pattern.explanation.contains.delimiters=• '[_\\-\\.\\s]+' - matches delimiters (underscore, hyphen, dot, space)
pattern.explanation.contains.caseInsensitive=• '(?i:...)' - case-insensitive matching
pattern.explanation.contains.any=• '.*' - matches any characters (zero or more)
pattern.explanation.contains.word.hyphen=• '[\\w\\-]+' - matches word characters and hyphens
pattern.explanation.group.pattern.note=For Group Pattern: The capturing group (parentheses) extracts the vehicle ID for grouping images.

# Accessibility
accessibility.logo=TollingVision application logo
accessibility.main.image=Main analysis image
accessibility.plate.thumbnail=License plate thumbnail
accessibility.navigation=Image navigation controls

# Validation dialog (PatternBuilderDialog)
validation.dialog.title=Validation Errors
validation.dialog.header=Pattern configuration has errors
validation.dialog.intro=Please fix the following errors before proceeding:
validation.dialog.warnings.header=Warnings:

# Role Rules Pane
role.rules.title=Step 3: Define Role Rules
role.rules.description=Create rules to classify images as Front, Rear, or Overview based on filename contents.
role.rules.form.title=Create New Rule
role.rules.form.image.role=Image Role:
role.rules.form.rule.type=Rule Type:
role.rules.form.match.text=Match Text:
role.rules.current=Current Rules
role.rules.precedence=Rule Precedence
role.rules.explanation.text=Rules are applied in order of role priority: OVERVIEW first, then FRONT, then REAR. More specific rules should have higher precedence.
role.rules.prompt.role=Select role...
role.rules.prompt.rule.type=Select rule type...
role.rules.prompt.match.text=Enter text to match...
role.rules.case.sensitive=Case sensitive
role.rules.add=Add Rule
role.rules.validation.header=Please fix the following before adding a rule
role.rules.validation.select.role=Please select an image role
role.rules.validation.select.type=Please select a rule type
role.rules.validation.enter.text=Please enter text to match
role.rules.suggestions.title=Suggested Rules
role.rules.suggestions.desc=Based on detected tokens, these rules may help classify images.
role.rules.suggestion.label=%s %s "%s"
role.rules.suggestion.reason=Detected "%s" in filename suggests this is %s
role.rules.chip.description=%s "%s"%s
role.rules.chip.tooltip=Role: %s\nType: %s\nValue: %s\nCase Sensitive: %s\nPriority: %d
role.rules.case.ignore.suffix= (ignore case)

# Common yes/no
common.yes=Yes
common.no=No

# Role display names
role.name.front=Front
role.name.rear=Rear
role.name.overview=Overview

# Rule type display names
rule.type.name.equals=Equals
rule.type.name.contains=Contains
rule.type.name.starts.with=Starts With
rule.type.name.ends.with=Ends With
rule.type.name.regex=Regex

# Rule type verbs (for sentences)
rule.type.verb.equals=equals
rule.type.verb.contains=contains
rule.type.verb.starts.with=starts with
rule.type.verb.ends.with=ends with
rule.type.verb.regex=matches

# Simple Pattern Builder - analysis
simple.analysis.status.running=Analyzing files...
simple.analysis.status.failed=Analysis failed: %s
simple.analysis.status.completed=Analysis completed - %d files found

# File Analysis Pane
file.analysis.title=Step 1: File Analysis
file.analysis.description=Select a directory containing sample image files. The system will analyze the first 500 files to detect common patterns and suggest token types.
file.analysis.sample.files=Sample Files (first 20):
file.analysis.results=Analysis Results:
file.analysis.prompt.select.dir=Select a directory containing sample image files...
file.analysis.status.select.dir=Select a directory to begin analysis
file.analysis.cache.ready=Cache: Ready
file.analysis.results.placeholder=Analysis results will appear here...
file.analysis.no.files=No files loaded
file.analysis.select.dir.title=Select Sample Files Directory
file.analysis.status.no.images=No image files found in selected directory
file.analysis.status.found.images=Found %d image files
file.analysis.status.error.read.dir=Error reading directory: %s
file.analysis.status.completed=Analysis completed successfully (%d file limit)
file.analysis.status.failed=Analysis failed: %s
file.analysis.alert.error.title=Analysis Error
file.analysis.alert.error.header=Failed to analyze files
file.analysis.status.cancelled=Analysis cancelled
file.analysis.status.low.memory=Warning: Low memory (%d MB available)
file.analysis.status.critical.memory=Critical: Very low memory (%d MB available)
file.analysis.summary.title=ANALYSIS SUMMARY
file.analysis.summary.files=Files analyzed: %d
file.analysis.summary.patterns=Unique patterns detected: %d
file.analysis.suggestions.title=TOKEN TYPE SUGGESTIONS
file.analysis.suggestions.description=Description: %s
file.analysis.suggestions.examples=Examples: %s
file.analysis.tokenization.title=SAMPLE TOKENIZATION
file.analysis.tokenization.file=File: %s